{"version":3,"sources":["components/ToolBar.tsx","utils/canvasUtils.ts","components/TextAnnotationInput.tsx","tools/drawTool.ts","tools/common.ts","components/ImageAnnotation.tsx","index.tsx"],"names":["ToolBar","props","currentTool","onSelectTool","onClear","onUndo","onExport","historyLength","strokeColor","lineWidth","onColorChange","onLineWidthChange","_jsxs","className","children","_jsx","htmlFor","id","type","value","onChange","e","target","style","marginRight","min","max","Number","onClick","marginLeft","background","color","disabled","TEXT_FONT","getCanvasPoint","canvas","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","getBoundingBox","ann","ctx","width","height","radius","minX","Math","minY","maxWidth","totalHeight","measureMultilineText","text","font","lines","split","i","length","metrics","measureText","isPointNearLine","x1","y1","x2","y2","threshold","arguments","undefined","C","D","len_sq","xx","yy","param","dx","dy","sqrt","isInAnnotation","abs","distance","boundingBox","points","p1","p2","cloneAnnotation","Array","isArray","_objectSpread","map","p","TextAnnotationInput","forwardRef","ref","annotations","ctxRef","canvasRef","defaultColor","setText","useState","visible","position","textAreaRef","useRef","focusTimer","fontColor","useMemo","initTextDimensions","useCallback","current","annotation","find","a","line","handleChange","input","maxLineWidth","forEach","prev","handleKeyDown","key","shiftKey","preventDefault","trim","useImperativeHandle","getText","useEffect","window","clearTimeout","setTimeout","focus","_Fragment","onKeyDown","memo","drawControlPoint","color1","color2","fillStyle","strokeStyle","beginPath","arc","PI","fill","stroke","ImageAnnotation","_ref","src","idRef","nextId","concat","Date","now","drawState","setDrawState","isDrawing","isDragging","startPos","currentPos","freehandPath","selectedId","setAnnotations","history","setHistory","setCurrentTool","setStrokeColor","setLineWidth","imageRef","reqAniRef","saveHistory","undo","lastState","slice","deleteSelected","filter","getContext","img","Image","crossOrigin","onload","drawCanvas","resizeCanvas","container","parentElement","ratio","clientWidth","addEventListener","removeEventListener","drawImage","naturalWidth","naturalHeight","displayWidth","displayHeight","offsetX","offsetY","dataset","scale","cancelAnimationFrame","requestAnimationFrame","clearRect","currentLineWidth","drawRectangle","strokeRect","drawCircle","drawArrow","fromX","fromY","toX","toY","angle","atan2","moveTo","lineTo","cos","sin","_textAreaRef$current","drawText","yPos","fillText","drawFreehand","lineHeight","setLineDash","handleMouseMove","isOnAnnotation","some","cursor","point","throttledMouseMove","func","delay","lastCall","getTime","_len","args","_key","apply","this","throttle","_textAreaRef$current7","ctrlKey","_textAreaRef$current8","clearCanvas","download","filename","dataUrl","toDataURL","document","createElement","href","click","remove","onMouseDown","detail","button","_textAreaRef$current2","_textAreaRef$current5","_textAreaRef$current3","_textAreaRef$current4","_textAreaRef$current6","clickedAnnotation","reverse","onMouseMove","onMouseUp","handleMouseUp","includes","newAnnotation","onContextMenu","handleContextMenu","rootElement","getElementById","Error","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.5689cdb2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ToolBar.css';\r\nimport { ToolType } from '../types/annotations';\r\n\r\ninterface ToolBarProps {\r\n  currentTool: string | null;\r\n  onSelectTool: (tool: ToolType) => void;\r\n  onClear: () => void;\r\n  onUndo: () => void;\r\n  onExport: () => void;\r\n  historyLength: number;\r\n  strokeColor: string;\r\n  lineWidth: number;\r\n  onColorChange: (color: string) => void;\r\n  onLineWidthChange: (width: number) => void;\r\n}\r\n\r\nconst ToolBar: React.FC<ToolBarProps> = (props: ToolBarProps) => {\r\n  const { currentTool, onSelectTool, onClear, onUndo, onExport, historyLength, strokeColor, lineWidth, onColorChange, onLineWidthChange } = props;\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <div className=\"brush-controls\">\r\n        <label htmlFor=\"color-picker\">颜色:</label>\r\n        <input id=\"color-picker\" type=\"color\" value={strokeColor} onChange={(e) => onColorChange(e.target.value)} style={{ marginRight: '10px' }} />\r\n        <label htmlFor=\"line-width\">线宽:</label>\r\n        <input id=\"line-width\" type=\"range\" min=\"1\" max=\"10\" value={lineWidth} onChange={(e) => onLineWidthChange(Number(e.target.value))} />\r\n        <span>{lineWidth}px</span>\r\n      </div>\r\n      <button className={currentTool === 'rectangle' ? 'active' : ''} onClick={() => onSelectTool('rectangle')}>\r\n        矩形\r\n      </button>\r\n      <button className={currentTool === 'circle' ? 'active' : ''} onClick={() => onSelectTool('circle')}>\r\n        圆形\r\n      </button>\r\n      <button className={currentTool === 'arrow' ? 'active' : ''} onClick={() => onSelectTool('arrow')}>\r\n        箭头\r\n      </button>\r\n      <button className={currentTool === 'text' ? 'active' : ''} onClick={() => onSelectTool('text')}>\r\n        文字\r\n      </button>\r\n      <button className={currentTool === 'freehand' ? 'active' : ''} onClick={() => onSelectTool('freehand')}>\r\n        自由线条\r\n      </button>\r\n      <button\r\n        onClick={onClear}\r\n        style={{\r\n          marginLeft: '20px',\r\n          background: '#ff4d4f',\r\n          color: 'white',\r\n        }}\r\n      >\r\n        清除所有\r\n      </button>\r\n      <button onClick={onUndo} disabled={historyLength === 0} style={{ marginLeft: '10px' }}>\r\n        上一步 (Ctrl+Z)\r\n      </button>\r\n      {/* <button onClick={onUndo} disabled={historyLength === 0} style={{ marginLeft: '10px' }}>\r\n        下一步 (Ctrl+Y)\r\n      </button> */}\r\n      <button onClick={onExport} style={{ marginLeft: '10px' }}>\r\n        导出\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToolBar;\r\n","import type { Annotation } from '../types/annotations';\r\n\r\nexport const TEXT_FONT: string = '16px Arial';\r\nexport const TEXT_LINE_HEIGHT: number = 20;\r\n\r\nexport const measureMultilineText = (ctx: CanvasRenderingContext2D, text: string) => {\r\n  ctx.font = TEXT_FONT;\r\n  const lines = text.split('\\n');\r\n  let maxWidth = 0;\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const metrics = ctx.measureText(lines[i]);\r\n    maxWidth = Math.max(maxWidth, metrics.width);\r\n  }\r\n  return { width: maxWidth, height: lines.length * TEXT_LINE_HEIGHT };\r\n};\r\n\r\nexport const getCanvasPoint = (e: React.MouseEvent, canvas: HTMLCanvasElement) => {\r\n  const rect = canvas.getBoundingClientRect();\r\n  return { x: e.clientX - rect.left, y: e.clientY - rect.top };\r\n};\r\n\r\nexport const getBoundingBox = (ann: Annotation, ctx: CanvasRenderingContext2D) => {\r\n  if (ann.type === 'rectangle') {\r\n    return {\r\n      x: ann.x,\r\n      y: ann.y,\r\n      width: ann.width,\r\n      height: ann.height,\r\n    };\r\n  } else if (ann.type === 'circle') {\r\n    return {\r\n      x: ann.x - ann.radius,\r\n      y: ann.y - ann.radius,\r\n      width: ann.radius * 2,\r\n      height: ann.radius * 2,\r\n    };\r\n  } else if (ann.type === 'arrow') {\r\n    const minX = Math.min(ann.x, ann.x + ann.width);\r\n    const minY = Math.min(ann.y, ann.y + ann.height);\r\n    const maxX = Math.max(ann.x, ann.x + ann.width);\r\n    const maxY = Math.max(ann.y, ann.y + ann.height);\r\n    return {\r\n      x: minX,\r\n      y: minY,\r\n      width: maxX - minX,\r\n      height: maxY - minY,\r\n    };\r\n  } else if (ann.type === 'text') {\r\n    const { width: maxWidth, height: totalHeight } = measureMultilineText(ctx, ann.text);\r\n    return {\r\n      x: ann.x,\r\n      y: ann.y - TEXT_LINE_HEIGHT,\r\n      width: maxWidth,\r\n      height: totalHeight,\r\n    };\r\n  }\r\n  return { x: 0, y: 0, width: 0, height: 0 };\r\n};\r\n\r\nexport const isInControlPoint = (ann: Annotation, x: number, y: number, ctx: CanvasRenderingContext2D) => {\r\n  if (ann.type === 'freehand') return false;\r\n  const boundingBox = getBoundingBox(ann, ctx);\r\n  return (\r\n    (Math.abs(x - boundingBox.x) < 6 && Math.abs(y - boundingBox.y) < 6) ||\r\n    (Math.abs(x - (boundingBox.x + boundingBox.width)) < 6 && Math.abs(y - boundingBox.y) < 6) ||\r\n    (Math.abs(x - (boundingBox.x + boundingBox.width)) < 6 && Math.abs(y - (boundingBox.y + boundingBox.height)) < 6) ||\r\n    (Math.abs(x - boundingBox.x) < 6 && Math.abs(y - (boundingBox.y + boundingBox.height)) < 6)\r\n  );\r\n};\r\n\r\nexport const isPointNearLine = (x: number, y: number, x1: number, y1: number, x2: number, y2: number, threshold: number = 6) => {\r\n  const A = x - x1;\r\n  const B = y - y1;\r\n  const C = x2 - x1;\r\n  const D = y2 - y1;\r\n  const dot = A * C + B * D;\r\n  const len_sq = C * C + D * D;\r\n  let param = -1;\r\n  if (len_sq !== 0) param = dot / len_sq;\r\n  let xx: number, yy: number;\r\n  if (param < 0) {\r\n    xx = x1;\r\n    yy = y1;\r\n  } else if (param > 1) {\r\n    xx = x2;\r\n    yy = y2;\r\n  } else {\r\n    xx = x1 + param * C;\r\n    yy = y1 + param * D;\r\n  }\r\n  const dx = x - xx;\r\n  const dy = y - yy;\r\n  return Math.sqrt(dx * dx + dy * dy) < threshold;\r\n};\r\n\r\nexport const isInAnnotation = (ann: Annotation, x: number, y: number, ctx: CanvasRenderingContext2D) => {\r\n  if (ann.type === 'rectangle') {\r\n    const lineWidth = 2;\r\n    return (\r\n      (Math.abs(x - ann.x) <= lineWidth && y >= ann.y && y <= ann.y + ann.height) ||\r\n      (Math.abs(x - (ann.x + ann.width)) <= lineWidth && y >= ann.y && y <= ann.y + ann.height) ||\r\n      (Math.abs(y - ann.y) <= lineWidth && x >= ann.x && x <= ann.x + ann.width) ||\r\n      (Math.abs(y - (ann.y + ann.height)) <= lineWidth && x >= ann.x && x <= ann.x + ann.width)\r\n    );\r\n  } else if (ann.type === 'circle') {\r\n    const distance = Math.sqrt((x - ann.x) ** 2 + (y - ann.y) ** 2);\r\n    return Math.abs(distance - ann.radius) <= 2;\r\n  } else if (ann.type === 'arrow') {\r\n    return isPointNearLine(x, y, ann.x, ann.y, ann.x + ann.width, ann.y + ann.height);\r\n  } else if (ann.type === 'text') {\r\n    const boundingBox = getBoundingBox(ann, ctx);\r\n    return x >= boundingBox.x && x <= boundingBox.x + boundingBox.width && y >= boundingBox.y && y <= boundingBox.y + boundingBox.height;\r\n  } else if (ann.type === 'freehand') {\r\n    for (let i = 0; i < ann.points.length - 1; i++) {\r\n      const p1 = ann.points[i];\r\n      const p2 = ann.points[i + 1];\r\n      if (isPointNearLine(x, y, p1.x, p1.y, p2.x, p2.y)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const cloneAnnotation = (ann: Annotation): Annotation => {\r\n  if (ann?.type === 'freehand' && Array.isArray(ann.points)) {\r\n    return { ...ann, points: ann.points.map((p) => ({ x: p.x, y: p.y })) };\r\n  }\r\n  return { ...ann };\r\n};\r\n\r\nexport const download = (canvas: HTMLCanvasElement, filename?: string) => {\r\n  const dataUrl = canvas.toDataURL('image/png');\r\n  const a = document.createElement('a');\r\n  a.href = dataUrl;\r\n  a.download = `${filename || 'annotated_image.png'}`;\r\n  a.click();\r\n  a.remove();\r\n};\r\n\r\nexport function throttle(func: (...args: any[]) => any, delay: number) {\r\n  let lastCall = 0;\r\n  return function (this: any, ...args: any[]) {\r\n    const now = new Date().getTime();\r\n    if (now - lastCall >= delay) {\r\n      func.apply(this, args);\r\n      lastCall = now;\r\n    }\r\n  };\r\n}\r\n","import { useState, useRef, useEffect, useCallback, memo, useMemo, useImperativeHandle, forwardRef } from 'react';\r\nimport type { Annotation, TextInputState } from '../types/annotations';\r\nimport { TEXT_FONT, TEXT_LINE_HEIGHT } from '../utils/canvasUtils';\r\nimport './ImageAnnotation.css';\r\n\r\nconst DEFAULT_WIDTH = 200;\r\nconst DEFAULT_HEIGHT = 24;\r\n\r\ninterface TextAnnotationInputProps {\r\n  annotations: Annotation[];\r\n  ctxRef: React.MutableRefObject<CanvasRenderingContext2D | null>;\r\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | null>;\r\n  defaultColor?: string;\r\n}\r\n\r\nexport interface TextAnnotationInputHandle {\r\n  getText: () => TextInputState;\r\n  setText: React.Dispatch<React.SetStateAction<TextInputState>>;\r\n}\r\n\r\nconst TextAnnotationInput = forwardRef<TextAnnotationInputHandle, TextAnnotationInputProps>((props, ref) => {\r\n  const { annotations, ctxRef, canvasRef, defaultColor } = props;\r\n  const [text, setText] = useState<TextInputState>({\r\n    visible: false,\r\n    position: { x: 0, y: 0 },\r\n    value: '',\r\n    id: null,\r\n    width: DEFAULT_WIDTH,\r\n    height: DEFAULT_HEIGHT,\r\n  });\r\n\r\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\r\n  const focusTimer = useRef<number | null>(null);\r\n\r\n  const fontColor = useMemo(() => defaultColor, [defaultColor]);\r\n\r\n  const initTextDimensions = useCallback(() => {\r\n    if (!ctxRef.current || !canvasRef.current) return;\r\n    ctxRef.current.font = TEXT_FONT;\r\n    let width = DEFAULT_WIDTH;\r\n    let height = DEFAULT_HEIGHT;\r\n    if (text.id) {\r\n      const annotation = annotations.find((a) => a.id === text.id);\r\n      if ((annotation as any)?.text) {\r\n        const lines = (annotation as any).text.split('\\n') as string[];\r\n        height = Math.max(DEFAULT_HEIGHT, lines.length * TEXT_LINE_HEIGHT);\r\n        width = Math.max(DEFAULT_WIDTH, ...lines.map((line) => (ctxRef.current ? ctxRef.current.measureText(line).width : 0))) + 10;\r\n      }\r\n    }\r\n\r\n    const x = Math.max(0, Math.min(text.position.x, canvasRef.current.width - width));\r\n    const y = Math.max(16, Math.min(text.position.y, canvasRef.current.height - height));\r\n    setText({ ...text, position: { x, y }, width, height });\r\n  }, [text, annotations, ctxRef, canvasRef]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n      if (!ctxRef.current || !canvasRef.current) return;\r\n      const input = e.target.value;\r\n      const lines = input.split('\\n');\r\n      let totalHeight = 0;\r\n      let maxLineWidth = 0;\r\n\r\n      lines.forEach((line) => {\r\n        const metrics = ctxRef.current!.measureText(line);\r\n        maxLineWidth = Math.max(maxLineWidth, metrics.width);\r\n        totalHeight += TEXT_LINE_HEIGHT;\r\n      });\r\n\r\n      setText((prev) => ({\r\n        ...prev,\r\n        value: input,\r\n        width: maxLineWidth + 10,\r\n        height: Math.min(totalHeight, canvasRef.current!.height - prev.position.y - 10),\r\n      }));\r\n    },\r\n    [ctxRef, canvasRef]\r\n  );\r\n\r\n  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Enter' && e.shiftKey) return;\r\n    if (e.key === 'Escape') {\r\n      e.preventDefault();\r\n      setText((prev) => ({ ...prev, visible: false, value: '' }));\r\n      return;\r\n    }\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      setText((prev) => ({ ...prev, visible: false, value: prev.value.trim() ? prev.value : '' }));\r\n    }\r\n  }, []);\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => ({\r\n      getText: () => text,\r\n      setText,\r\n    }),\r\n    [text]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!text.visible) return;\r\n    initTextDimensions();\r\n  }, [text.visible, text.id, initTextDimensions]);\r\n\r\n  useEffect(() => {\r\n    if (textAreaRef.current && text.visible) {\r\n      if (focusTimer.current) window.clearTimeout(focusTimer.current);\r\n      focusTimer.current = window.setTimeout(() => {\r\n        textAreaRef.current && textAreaRef.current.focus();\r\n      }, 200);\r\n    }\r\n    return () => {\r\n      if (focusTimer.current) window.clearTimeout(focusTimer.current);\r\n    };\r\n  }, [text.position, text.visible]);\r\n\r\n  return (\r\n    <>\r\n      {text.visible ? (\r\n        <textarea\r\n          id=\"textInput\"\r\n          ref={textAreaRef}\r\n          className=\"text-input\"\r\n          value={text.value}\r\n          style={{\r\n            left: text.position.x,\r\n            top: text.position.y,\r\n            width: text.width,\r\n            height: text.height,\r\n            color: fontColor,\r\n          }}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default memo(TextAnnotationInput);\r\n","import type { ArrowDrawingPayload, CircleAnnotation, FreehandAnnotation, RectangleAnnotation, TextAnnotation } from '../types/annotations';\r\n\r\nexport const drawArrow = (ctx: CanvasRenderingContext2D, annotation: ArrowDrawingPayload, lineWidth: number): void => {\r\n  const { fromX, fromY, toX, toY, color } = annotation;\r\n  if (Math.abs(toX - fromX) < 5 && Math.abs(toY - fromY) < 5) return;\r\n  const headLength = 15;\r\n  const angle = Math.atan2(toY - fromY, toX - fromX);\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(fromX, fromY);\r\n  ctx.lineTo(toX, toY);\r\n  ctx.stroke();\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(toX, toY);\r\n  ctx.lineTo(toX - headLength * Math.cos(angle - Math.PI / 6), toY - headLength * Math.sin(angle - Math.PI / 6));\r\n  ctx.moveTo(toX, toY);\r\n  ctx.lineTo(toX - headLength * Math.cos(angle + Math.PI / 6), toY - headLength * Math.sin(angle + Math.PI / 6));\r\n  ctx.stroke();\r\n};\r\n\r\nexport const drawCircle = (ctx: CanvasRenderingContext2D, annotation: CircleAnnotation, lineWidth: number): void => {\r\n  ctx.strokeStyle = annotation.color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.beginPath();\r\n  ctx.arc(annotation.x, annotation.y, annotation.radius, 0, Math.PI * 2);\r\n  ctx.stroke();\r\n};\r\n\r\nexport const drawFreehand = (ctx: CanvasRenderingContext2D, annotation: FreehandAnnotation, lineWidth: number): void => {\r\n  if (!annotation.points.length) return;\r\n  ctx.strokeStyle = annotation.color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.beginPath();\r\n  ctx.moveTo(annotation.points[0].x, annotation.points[0].y);\r\n  for (let i = 1; i < annotation.points.length; i++) {\r\n    ctx.lineTo(annotation.points[i].x, annotation.points[i].y);\r\n  }\r\n  ctx.stroke();\r\n};\r\n\r\nexport const drawRectangle = (ctx: CanvasRenderingContext2D, annotation: RectangleAnnotation, lineWidth: number): void => {\r\n  ctx.strokeStyle = annotation.color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.strokeRect(annotation.x, annotation.y, annotation.width, annotation.height);\r\n};\r\n\r\nexport const drawText = (ctx: CanvasRenderingContext2D, annotation: TextAnnotation): void => {\r\n  ctx.fillStyle = annotation.color;\r\n  ctx.font = '16px Arial';\r\n  const lines = annotation.text.split('\\n');\r\n  let yPos = annotation.y;\r\n  for (let i = 0; i < lines.length; i++) {\r\n    ctx.fillText(lines[i], annotation.x, yPos);\r\n    yPos += 20;\r\n  }\r\n};\r\n","import type { Annotation } from '../types/annotations';\r\n\r\nexport const drawControlPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, color1: string = '#FF0000', color2: string = '#FFFFFF'): void => {\r\n  ctx.fillStyle = color2;\r\n  ctx.strokeStyle = color1;\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, 5, 0, Math.PI * 2);\r\n  ctx.fill();\r\n  ctx.stroke();\r\n};\r\n\r\nexport const getBoundingBox = (ann: Annotation, ctx: CanvasRenderingContext2D): { x: number; y: number; width: number; height: number } => {\r\n  if (ann.type === 'rectangle') {\r\n    return { x: ann.x, y: ann.y, width: ann.width, height: ann.height };\r\n  } else if (ann.type === 'circle') {\r\n    return {\r\n      x: ann.x - ann.radius,\r\n      y: ann.y - ann.radius,\r\n      width: ann.radius * 2,\r\n      height: ann.radius * 2,\r\n    };\r\n  } else if (ann.type === 'arrow') {\r\n    const minX = Math.min(ann.x, ann.x + ann.width);\r\n    const minY = Math.min(ann.y, ann.y + ann.height);\r\n    const maxX = Math.max(ann.x, ann.x + ann.width);\r\n    const maxY = Math.max(ann.y, ann.y + ann.height);\r\n    return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n  } else if (ann.type === 'text') {\r\n    ctx.font = '16px Arial';\r\n    const lines = ann.text.split('\\n');\r\n    const lineHeight = 20;\r\n    const totalHeight = lines.length * lineHeight;\r\n    let maxWidth = 0;\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const metrics = ctx.measureText(lines[i]);\r\n      maxWidth = Math.max(maxWidth, metrics.width);\r\n    }\r\n    return { x: ann.x, y: ann.y - lineHeight, width: maxWidth, height: totalHeight };\r\n  }\r\n  return { x: 0, y: 0, width: 0, height: 0 };\r\n};\r\n","import React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';\r\nimport ToolBar from './ToolBar';\r\nimport TextAnnotationInput, { TextAnnotationInputHandle } from './TextAnnotationInput';\r\nimport { drawCircle, drawFreehand, drawRectangle, drawText, drawArrow } from '../tools/drawTool';\r\nimport { drawControlPoint, getBoundingBox } from '../tools/common';\r\nimport { isInAnnotation, throttle, getCanvasPoint, cloneAnnotation, download } from '../utils/canvasUtils';\r\nimport type { Annotation, ToolType } from '../types/annotations';\r\nimport './ImageAnnotation.css';\r\n\r\nconst DEFAULT_WIDTH = 800;\r\nconst DEFAULT_HEIGHT = 600;\r\n\r\ninterface ImageAnnotationProps {\r\n  src: string;\r\n}\r\n\r\ninterface DrawState {\r\n  isDrawing: boolean;\r\n  isDragging: boolean;\r\n  startPos: { x: number; y: number };\r\n  currentPos: { x: number; y: number };\r\n  freehandPath: Array<{ x: number; y: number }>;\r\n  selectedId: string | null;\r\n}\r\n\r\nconst ImageAnnotation: React.FC<ImageAnnotationProps> = ({ src }) => {\r\n  const idRef = useRef(0);\r\n  const nextId = useCallback(() => `${Date.now()}-${idRef.current++}`, []);\r\n\r\n  const [drawState, setDrawState] = useState<DrawState>({\r\n    isDrawing: false,\r\n    isDragging: false,\r\n    startPos: { x: 0, y: 0 },\r\n    currentPos: { x: 0, y: 0 },\r\n    freehandPath: [],\r\n    selectedId: null,\r\n  });\r\n  const [annotations, setAnnotations] = useState<Annotation[]>([]);\r\n  const [history, setHistory] = useState<Annotation[][]>([]);\r\n  const [currentTool, setCurrentTool] = useState<ToolType>(null);\r\n  const [strokeColor, setStrokeColor] = useState<string>('#FF0000');\r\n  const [lineWidth, setLineWidth] = useState<number>(2);\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const imageRef = useRef<HTMLImageElement | null>(null);\r\n  const textAreaRef = useRef<TextAnnotationInputHandle | null>(null);\r\n  const reqAniRef = useRef<number | null>(null);\r\n  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);\r\n\r\n  const onExport = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    download(canvas);\r\n  };\r\n\r\n  const saveHistory = useCallback(() => {\r\n    setHistory((prev) => [...prev, annotations.map(cloneAnnotation)]);\r\n  }, [annotations]);\r\n\r\n  const undo = () => {\r\n    if (history.length > 0) {\r\n      const lastState = history[history.length - 1];\r\n      setHistory((prev) => prev.slice(0, -1));\r\n      setAnnotations(lastState);\r\n      setDrawState((prev) => ({ ...prev, selectedId: null }));\r\n    }\r\n  };\r\n\r\n  const deleteSelected = useCallback(() => {\r\n    if (drawState.selectedId) {\r\n      saveHistory();\r\n      setAnnotations((prev) => prev.filter((a) => a.id !== drawState.selectedId));\r\n      setDrawState((prev) => ({ ...prev, selectedId: null }));\r\n    }\r\n  }, [drawState.selectedId, saveHistory]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    canvas.width = DEFAULT_WIDTH;\r\n    canvas.height = DEFAULT_HEIGHT;\r\n    ctxRef.current = canvas.getContext('2d');\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.src = src;\r\n    img.onload = () => {\r\n      imageRef.current = img;\r\n      drawCanvas();\r\n    };\r\n    const resizeCanvas = () => {\r\n      const container = canvas.parentElement;\r\n      if (container && imageRef.current) {\r\n        const ratio = imageRef.current.width / imageRef.current.height;\r\n        const maxWidth = container.clientWidth;\r\n        canvas.style.width = `${Math.min(maxWidth, imageRef.current.width)}px`;\r\n        canvas.style.height = `${Math.min(maxWidth / ratio, imageRef.current.height)}px`;\r\n      }\r\n    };\r\n    window.addEventListener('resize', resizeCanvas);\r\n    return () => window.removeEventListener('resize', resizeCanvas);\r\n  }, [src]);\r\n\r\n  const drawImage = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    if (!canvas || !ctx || !imageRef.current) return;\r\n    const ratio = Math.min(DEFAULT_WIDTH / imageRef.current.naturalWidth, DEFAULT_HEIGHT / imageRef.current.naturalHeight);\r\n    const displayWidth = imageRef.current.naturalWidth * ratio;\r\n    const displayHeight = imageRef.current.naturalHeight * ratio;\r\n    const offsetX = (DEFAULT_WIDTH - displayWidth) / 2;\r\n    const offsetY = (DEFAULT_HEIGHT - displayHeight) / 2;\r\n    ctx.drawImage(imageRef.current, offsetX, offsetY, displayWidth, displayHeight);\r\n    canvas.dataset.scale = `${ratio}`;\r\n    canvas.dataset.offsetX = `${offsetX}`;\r\n    canvas.dataset.offsetY = `${offsetY}`;\r\n  }, []);\r\n\r\n  const drawCanvas = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    if (!canvas || !ctx) return;\r\n    const { startPos, currentPos, isDrawing, selectedId, freehandPath } = drawState;\r\n    if (reqAniRef.current) cancelAnimationFrame(reqAniRef.current);\r\n    reqAniRef.current = requestAnimationFrame(() => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      const strokeStyle = strokeColor;\r\n      const currentLineWidth = lineWidth;\r\n      drawImage();\r\n      annotations.forEach((ann) => {\r\n        switch (ann.type) {\r\n          case 'rectangle':\r\n            drawRectangle(ctx, ann, ann.lineWidth || currentLineWidth);\r\n            break;\r\n          case 'circle':\r\n            drawCircle(ctx, ann, ann.lineWidth || currentLineWidth);\r\n            break;\r\n          case 'arrow':\r\n            drawArrow(ctx, { ...ann, fromX: ann.x, fromY: ann.y, toX: ann.x + ann.width, toY: ann.y + ann.height }, ann.lineWidth || currentLineWidth);\r\n            break;\r\n          case 'text': {\r\n            const text = textAreaRef.current?.getText();\r\n            if (text?.visible && text.id === ann.id) return;\r\n            drawText(ctx, ann);\r\n            break;\r\n          }\r\n          case 'freehand':\r\n            drawFreehand(ctx, ann, ann.lineWidth || currentLineWidth);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        if (ann.id === selectedId && ann.type !== 'freehand' && ann.type !== 'text') {\r\n          const boundingBox = getBoundingBox(ann, ctx);\r\n          if (ann.type === 'arrow') {\r\n            drawControlPoint(ctx, ann.x, ann.y);\r\n            drawControlPoint(ctx, ann.x + ann.width, ann.y + ann.height);\r\n          } else {\r\n            ctx.setLineDash([3, 3]);\r\n            ctx.strokeStyle = '#1890ff';\r\n            ctx.strokeRect(boundingBox.x, boundingBox.y, boundingBox.width, boundingBox.height);\r\n            ctx.setLineDash([]);\r\n            drawControlPoint(ctx, boundingBox.x, boundingBox.y);\r\n            drawControlPoint(ctx, boundingBox.x + boundingBox.width, boundingBox.y);\r\n            drawControlPoint(ctx, boundingBox.x + boundingBox.width, boundingBox.y + boundingBox.height);\r\n            drawControlPoint(ctx, boundingBox.x, boundingBox.y + boundingBox.height);\r\n          }\r\n        }\r\n      });\r\n\r\n      // if (isDrawing && currentTool) {\r\n      //   const width = currentPos.x - startPos.x;\r\n      //   const height = currentPos.y - startPos.y;\r\n      //   switch (currentTool) {\r\n      //     case 'rectangle':\r\n      //       drawRectangle(ctx, { x: startPos.x, y: startPos.y, width, height, color: strokeStyle }, currentLineWidth);\r\n      //       break;\r\n      //     case 'circle': {\r\n      //       const radius = Math.sqrt(width ** 2 + height ** 2);\r\n      //       drawCircle(ctx, { x: startPos.x, y: startPos.y, radius, color: strokeStyle }, currentLineWidth);\r\n      //       break;\r\n      //     }\r\n      //     case 'arrow':\r\n      //       drawArrow(ctx, { fromX: startPos.x, fromY: startPos.y, toX: currentPos.x, toY: currentPos.y, color: strokeStyle }, currentLineWidth);\r\n      //       break;\r\n      //     case 'freehand':\r\n      //       drawFreehand(ctx, { points: freehandPath, color: strokeStyle }, currentLineWidth);\r\n      //       break;\r\n      //     default:\r\n      //       break;\r\n      //   }\r\n      // }\r\n    });\r\n  }, [annotations, drawState, currentTool, strokeColor, lineWidth, drawImage]);\r\n\r\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    if (e.detail === 2 || e.button === 2 || !currentTool) return;\r\n    const canvas = canvasRef.current;\r\n    const ctx = ctxRef.current;\r\n    if (!canvas || !ctx) return;\r\n    const { x, y } = getCanvasPoint(e, canvas);\r\n    const isOnTextAnnotation = annotations.filter((ann) => ann.type === 'text').some((ann) => isInAnnotation(ann, x, y, ctx));\r\n    if (!isOnTextAnnotation) {\r\n      const text = textAreaRef.current?.getText();\r\n      if (currentTool === 'text') {\r\n        if (text?.visible) {\r\n          if (text.value && text.value.trim()) {\r\n            const id = text.id || nextId();\r\n            setAnnotations((prev) => [...prev, { id, type: 'text', x: text.position.x, y: text.position.y + 16, text: text.value, color: strokeColor }]);\r\n            textAreaRef.current?.setText({ ...text, id, visible: false });\r\n            saveHistory();\r\n          } else {\r\n            textAreaRef.current?.setText((prev) => ({ ...prev, position: { x, y } }));\r\n          }\r\n        } else {\r\n          textAreaRef.current?.setText((prev) => ({ ...prev, visible: true, position: { x, y }, value: '', id: null }));\r\n        }\r\n        return;\r\n      } else {\r\n        text?.visible && textAreaRef.current?.setText({ ...text, visible: false });\r\n      }\r\n    }\r\n\r\n    const clickedAnnotation = [...annotations].reverse().find((ann) => isInAnnotation(ann, x, y, ctx));\r\n    setDrawState({\r\n      ...drawState,\r\n      startPos: { x, y },\r\n      currentPos: { x, y },\r\n      freehandPath: currentTool === 'freehand' ? [{ x, y }] : [],\r\n      selectedId: clickedAnnotation?.id || null,\r\n      isDragging: !!clickedAnnotation,\r\n      isDrawing: !clickedAnnotation,\r\n    });\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    if (drawState.selectedId) {\r\n      setDrawState({ ...drawState, selectedId: null });\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = useCallback(\r\n    (e: React.MouseEvent<HTMLCanvasElement>) => {\r\n      const canvas = canvasRef.current;\r\n      const ctx = ctxRef.current;\r\n      if (!canvas || !ctx) return;\r\n      const { startPos, currentPos, isDragging, isDrawing, selectedId, freehandPath } = drawState;\r\n      const { x, y } = getCanvasPoint(e, canvas);\r\n      const isOnAnnotation = annotations.some((ann) => isInAnnotation(ann, x, y, ctx));\r\n      canvas.style.cursor = isOnAnnotation ? 'move' : 'crosshair';\r\n      if (isDragging && selectedId) {\r\n        const dx = x - currentPos.x;\r\n        const dy = y - currentPos.y;\r\n        setAnnotations((prev) =>\r\n          prev.map((ann) => {\r\n            if (ann.id === selectedId) {\r\n              if (ann.type === 'freehand') {\r\n                return {\r\n                  ...ann,\r\n                  points: ann.points.map((point: any) => ({ x: point.x + dx, y: point.y + dy })),\r\n                };\r\n              } else {\r\n                return { ...ann, x: ann.x + dx, y: ann.y + dy };\r\n              }\r\n            }\r\n            return ann;\r\n          })\r\n        );\r\n        setDrawState({ ...drawState, currentPos: { x, y } });\r\n        drawCanvas();\r\n        return;\r\n      }\r\n      if (isDrawing) {\r\n        setDrawState({ ...drawState, freehandPath: currentTool === 'freehand' ? [...freehandPath, { x, y }] : freehandPath, currentPos: { x, y } });\r\n        drawCanvas();\r\n      }\r\n    },\r\n    [drawState, currentTool, annotations, drawCanvas]\r\n  );\r\n\r\n  const throttledMouseMove = useMemo(() => throttle(handleMouseMove, 50), [handleMouseMove]);\r\n\r\n  const handleMouseUp = () => {\r\n    const { startPos, currentPos, isDrawing, isDragging, freehandPath } = drawState;\r\n    if ((isDrawing && isDragging) || !currentTool) return;\r\n    if (isDragging) {\r\n      saveHistory();\r\n      setDrawState({ ...drawState, isDragging: false, isDrawing: false });\r\n      return;\r\n    }\r\n    const width = currentPos.x - startPos.x;\r\n    const height = currentPos.y - startPos.y;\r\n    if (['rectangle', 'circle', 'arrow', 'freehand'].includes(currentTool) && (Math.abs(width) > 3 || Math.abs(height) > 3)) {\r\n      saveHistory();\r\n      const points = currentTool === 'freehand' ? { points: [...freehandPath] } : {};\r\n      const radius = currentTool === 'circle' ? { radius: Math.sqrt(width ** 2 + height ** 2) } : {};\r\n      const newAnnotation: any = {\r\n        id: nextId(),\r\n        type: currentTool,\r\n        x: startPos.x,\r\n        y: startPos.y,\r\n        width,\r\n        height,\r\n        color: strokeColor,\r\n        lineWidth: lineWidth,\r\n        ...points,\r\n        ...radius,\r\n      };\r\n      freehandPath.length > 0 && setDrawState({ ...drawState, freehandPath: [] });\r\n      setAnnotations((prev) => [...prev, newAnnotation]);\r\n    }\r\n    setDrawState({ selectedId: drawState.selectedId, freehandPath: [], startPos: { x: 0, y: 0 }, currentPos: { x: 0, y: 0 }, isDrawing: false, isDragging: false });\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    saveHistory();\r\n    setAnnotations([]);\r\n    setDrawState({ ...drawState, selectedId: null });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { selectedId, isDragging, isDrawing } = drawState;\r\n    if (!isDragging || !isDrawing) {\r\n      drawCanvas();\r\n    }\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      canvas.style.cursor = selectedId ? 'move' : 'crosshair';\r\n    }\r\n  }, [annotations, drawState.isDragging, drawState.isDrawing, drawState.selectedId, drawCanvas]);\r\n\r\n  useEffect(() => {\r\n    if (drawState.selectedId && currentTool !== 'freehand') {\r\n      setDrawState({ ...drawState, selectedId: null });\r\n    }\r\n  }, [currentTool]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      const text = textAreaRef.current?.getText();\r\n      if (currentTool === 'text' && text?.visible) {\r\n        return;\r\n      }\r\n      if (e.key === 'Delete') {\r\n        deleteSelected();\r\n      } else if (e.ctrlKey && e.key === 'z') {\r\n        undo();\r\n      } else if (e.key === 'Escape') {\r\n        if (currentTool === 'text' && text?.visible) {\r\n          textAreaRef.current?.setText({ ...text, visible: false });\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      if (reqAniRef.current) cancelAnimationFrame(reqAniRef.current);\r\n    };\r\n  }, [deleteSelected, undo, currentTool]);\r\n\r\n  return (\r\n    <div>\r\n      <ToolBar\r\n        currentTool={currentTool}\r\n        onSelectTool={setCurrentTool}\r\n        onClear={clearCanvas}\r\n        onUndo={undo}\r\n        onExport={onExport}\r\n        historyLength={history.length}\r\n        strokeColor={strokeColor}\r\n        lineWidth={lineWidth}\r\n        onColorChange={setStrokeColor}\r\n        onLineWidthChange={setLineWidth}\r\n      />\r\n      <div className=\"image-container\">\r\n        <canvas ref={canvasRef} onMouseDown={handleMouseDown} onMouseMove={throttledMouseMove} onMouseUp={handleMouseUp} onContextMenu={handleContextMenu} />\r\n        <TextAnnotationInput ref={textAreaRef} annotations={annotations} defaultColor={strokeColor} ctxRef={ctxRef} canvasRef={canvasRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageAnnotation;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ImageAnnotation from './components/ImageAnnotation';\n\nconst rootElement = document.getElementById('app');\nif (!rootElement) throw new Error('Root element not found in DOM');\n\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n  // <React.StrictMode>\n  <ImageAnnotation src=\"https://img1.baa.bitautotech.com/dzusergroupfiles/2024/11/06/e2a4e9bb9e854429bed46ba1e343b47a.jpg\" />\n  // </React.StrictMode>\n);\n"],"sourceRoot":""}